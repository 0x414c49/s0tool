substitutions:
  time_timezone: "Europe/Amsterdam"
  vdate: "16/11/2021_v1.68"
  device_description: s0 kwh meter en watermeter
  impulslengte: "50ms" #30ms of 50ms zie datasheet van het type meter
  name: S0 & Water Meter
    
esphome:
  name: pulsmeters
  platform: ESP8266
  board: d1_mini
  
  project:
    name: huizebruin.S0_meter
    version: "${vdate}"

dashboard_import:
  package_import_url: github://huizebruin/s0tool/esphome/pulscounter.yaml

wifi:
  networks: []
# Hieronder kan je je eigen gegeven invullen voor je wifi netwerk en ip-adres 
# dit zijn de hekjes voor de regels 27,28,31,33,35. En plaatst een # voor regel 23

#  ssid: !secret ssid
#  password: !secret password
#  manual_ip:
    # Set this to the IP of the ESP
#    static_ip: 192.168.178.123
    # Set this to the IP address of the router. Often ends with .1
#    gateway: 192.168.178.2 
    # The subnet of the network. 255.255.255.0 works for most home networks.
#    subnet: 255.255.255.0  

# Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "S0-Meter Fallback Hotspot"
    password: "s0watermeter"
    
web_server:
  port: 80
  
captive_portal:

# Enable logging
logger:
  level: INFO
  
# Enable Home Assistant API
api:
  services:
    - service: set_water_usage
      variables:
        meter_value: float
      then:
        - globals.set:
            id: totalWaterUsage
            value: !lambda "return meter_value;"

    - service: set_kwh_usage
      variables:
        meter_value: float
      then:
        - globals.set:
            id: totalkwhUsage
            value: !lambda "return meter_value;"

globals:
  - id: totalWaterUsage
    type: float
    restore_value: yes       # When updating below value, change this to no for 1 run.
    initial_value: '100.001' # begin stand
    
  - id: totalkwhUsage
    type: float
    restore_value: yes       # When updating below value, change this to no for 1 run.
    initial_value: '1000.001' # begin stand

ota:

# Enable time component to reset energy at midnight
time:
  - platform: homeassistant
    id: time_homeassistant
    timezone: "${time_timezone}"

  - platform: sntp
    id: time_sntp
    timezone: "${time_timezone}"

select:
  - platform: template
    name: "multiply kWh meter"
    id: Select_multiply
    optimistic: true
    options:
      - "33"
      - "32" 
      - "31"
      - "30" #2000 puls
      - "29"
      - "28"
      - "17"
      - "16" 
      - "15"#1000 puls
      - "14"
      - "13"       
      - "9"
      - "8" 
      - "7"#500 puls
      - "6"
      - "5"
    initial_option: "30"
    on_value:
      then:
        - logger.log:
            format: "Chosen option: %s "
            args: ["x.c_str()"]
sensor:
#kwh meter s0
  - platform: pulse_meter
    pin: D5
    name:  "Actuele energie "
    id: W_opbrengst
    icon: "mdi:flash"
    internal_filter: ${impulslengte} 
    accuracy_decimals: 0
    unit_of_measurement: 'W'
    filters:
      - lambda: return x * atoi(id(Select_multiply).state.c_str());
    
    total:
      unit_of_measurement: 'kWh'
      name: "Totaal opgebracht "
      id: W_opbrengst_totaal
      icon: "mdi:flash"
      accuracy_decimals: 2
      filters:
        - multiply: 0.0001 

  - platform: template
    id: kwh_total
    name: "Actuele meterstand"
    icon: "mdi:flash"
    update_interval: 1s
    unit_of_measurement: kWh
    accuracy_decimals: 2
    lambda: |-
      return id(W_opbrengst_totaal).state + id(totalkwhUsage) ;
  
#watermeter 
  - platform: pulse_counter
    pin: D2
    id: watermeter_pulse
    name: "watermeter pulse"
    update_interval: 1s
    unit_of_measurement: L
    accuracy_decimals: 1
    filters:
      - multiply: 0.016666667
      
    total:
      id: sensor_pulse_meter_total
      name: "watermeter Totaal"
      icon: "mdi:cube-outline"
      unit_of_measurement: "M3"
      accuracy_decimals: 3
      filters:
      - multiply: 0.001

  - platform: template
    id: watermeter_total
    name: "watermeter stand"
    icon: mdi:water
    update_interval: 1s
    unit_of_measurement: mÂ³
    accuracy_decimals: 3
    lambda: |-
      if (id(watermeter_pulse).state >= 1) {
        id(totalWaterUsage) += 0.001;
      }
      return id(totalWaterUsage);
    
#versie sensor voor in ha
text_sensor:
  - platform: template
    name: " Versie"
    icon: "mdi:label-outline"
    update_interval: 12h
    lambda: |-
      return {"${vdate}"};
      
  - platform: wifi_info
    ip_address:
      name: IP-adres
      icon: mdi:ip-network
    ssid:
      name: Netwerk
      icon: mdi:access-point-network
    mac_address:
      name: Mac-adres
      icon: mdi:folder-key-network-outline
